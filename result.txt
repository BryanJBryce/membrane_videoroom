
13:33:37.278 [info]  [Porcelain]: goon executable not found

13:33:37.278 [info]  [Porcelain]: falling back to the basic driver.

13:33:37.278 [info]  [Porcelain]: (set `config :porcelain, driver: Porcelain.Driver.Basic` or `config :porcelain, goon_warn_if_missing: false` to disable this warning)
Interactive Elixir (1.7.3) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> nil
iex(2)> {:ok, #PID<0.216.0>}
iex(3)> :ok
iex(4)> nil
iex(5)> 
13:33:37.372 [error] GenServer #PID<0.224.0> terminating
** (WithClauseError) no with clause matching: {{:error, {:error_handling_actions, :invalid_caps}}, %Membrane.Element.Manager.State{controlling_pid: #PID<0.216.0>, internal_state: %{eos: false, native: #Reference<0.572973007.2790129668.69>, options: %Membrane.Element.Lame.Encoder{bitrate: 192, quality: :medium}, queue: ""}, message_bus: #PID<0.216.0>, module: Membrane.Element.Lame.Encoder, name: :encoder, pads: %{data: %{sink: %{accepted_caps: {Membrane.Caps.Audio.Raw, [format: :s32le, sample_rate: 44100, channels: 2]}, availability: :always, buffer: %Membrane.PullBuffer{current_size: 0, demand: 0, metric: Membrane.Buffer.Metric.ByteSize, min_demand: 16384, name: :encoder, preferred_size: 65536, q: #Qex<[]>, sink: {#PID<0.222.0>, :source}, sink_name: :sink, toilet: false}, caps: nil, direction: :sink, eos: false, is_dynamic: false, mode: :pull, name: :sink, options: %{demand_in: :bytes}, other_name: :source, pid: #PID<0.222.0>, self_demand: 0, sos: false, sticky_messages: []}, source: %{accepted_caps: {Membrane.Caps.Audio.MPEG, [channels: 2, sample_rate: 44100, layer: :layer3, version: :v1]}, availability: :always, caps: %Membrane.Caps.Audio.MPEG{bitrate: 192, channel_mode: nil, channels: 2, copyright: nil, crc_enabled: nil, emphasis_mode: nil, layer: :layer3, mode_extension: nil, original: nil, padding_enabled: nil, private: nil, sample_rate: 44100, version: :v1}, demand: 10, direction: :source, eos: false, is_dynamic: false, mode: :pull, name: :source, options: %{other_demand_in: :buffers}, other_name: :sink, pid: #PID<0.223.0>, sos: false}}, dynamic_currently_linking: [], info: %{}}, playback: %Membrane.Mixins.Playback{async_state_change: false, pending_state: nil, state: :playing, target_locked?: false, target_state: :playing}, playback_buffer: %Membrane.Element.Manager.PlaybackBuffer{q: #Qex<[]>}}}
    (membrane_core) lib/membrane_core/element/manager/common.ex:286: Membrane.Element.Manager.Common.do_handle_caps/3
    (membrane_core) lib/membrane_core/element/manager/message_dispatcher.ex:7: Membrane.Element.Manager.MessageDispatcher.handle_message/3
    (membrane_core) lib/membrane_core/element.ex:271: Membrane.Element.handle_info/2
    (stdlib) gen_server.erl:637: :gen_server.try_dispatch/4
    (stdlib) gen_server.erl:711: :gen_server.handle_msg/6
    (stdlib) proc_lib.erl:249: :proc_lib.init_p_do_apply/3
Last message: {:membrane_caps, [%Membrane.Caps.Audio.Raw{channels: 2, format: :s32le, sample_rate: 44100}, :sink]}
State: %Membrane.Element.Manager.State{controlling_pid: #PID<0.216.0>, internal_state: %{eos: false, native: #Reference<0.572973007.2790129668.69>, options: %Membrane.Element.Lame.Encoder{bitrate: 192, quality: :medium}, queue: ""}, message_bus: #PID<0.216.0>, module: Membrane.Element.Lame.Encoder, name: :encoder, pads: %{data: %{sink: %{accepted_caps: {Membrane.Caps.Audio.Raw, [format: :s32le, sample_rate: 44100, channels: 2]}, availability: :always, buffer: %Membrane.PullBuffer{current_size: 0, demand: 0, metric: Membrane.Buffer.Metric.ByteSize, min_demand: 16384, name: :encoder, preferred_size: 65536, q: #Qex<[]>, sink: {#PID<0.222.0>, :source}, sink_name: :sink, toilet: false}, caps: nil, direction: :sink, eos: false, is_dynamic: false, mode: :pull, name: :sink, options: %{demand_in: :bytes}, other_name: :source, pid: #PID<0.222.0>, self_demand: 0, sos: false, sticky_messages: []}, source: %{accepted_caps: {Membrane.Caps.Audio.MPEG, [channels: 2, sample_rate: 44100, layer: :layer3, version: :v1]}, availability: :always, caps: %Membrane.Caps.Audio.MPEG{bitrate: 192, channel_mode: nil, channels: 2, copyright: nil, crc_enabled: nil, emphasis_mode: nil, layer: :layer3, mode_extension: nil, original: nil, padding_enabled: nil, private: nil, sample_rate: 44100, version: :v1}, demand: 10, direction: :source, eos: false, is_dynamic: false, mode: :pull, name: :source, options: %{other_demand_in: :buffers}, other_name: :sink, pid: #PID<0.223.0>, sos: false}}, dynamic_currently_linking: [], info: %{}}, playback: %Membrane.Mixins.Playback{async_state_change: false, pending_state: nil, state: :playing, target_locked?: false, target_state: :playing}, playback_buffer: %Membrane.Element.Manager.PlaybackBuffer{q: #Qex<[]>}}
